{"version":3,"sources":["components/ProductCard.js","components/Cart.js","App.js","serviceWorker.js","index.js"],"names":["ProductCard","product","addToCart","className","src","alt","size","name","price","onClick","color","Cart","products","setCart","total","reduce","ac","count","useState","showform","address","msg","state","setstate","postOrder","a","data","amount","map","p","fetch","method","headers","body","JSON","stringify","res","json","response","prevState","length","onChange","e","target","value","placeholder","disabled","key","id","width","type","event","changeCount","filter","removeItem","alert","App","cart","setState","useEffect","fetchData","alreadyInCart","href","slice","c","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.330c95ce.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { ShoppingCart, Heart } from 'react-feather';\r\n\r\nexport default function ProductCard({product, addToCart}) {\r\n  return (\r\n    <div className=\"col-md-4\">\r\n      <div className=\"card mb-4 shadow-sm\">\r\n        <img\r\n          src=\"food.png\"\r\n          // src={product.image}\r\n          className=\"card-img-top\"\r\n          alt=\"imh\"\r\n        />\r\n        <div className=\"btn btn-sm border rounded-circle fav\">\r\n        <Heart size={16}/>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title mb-1 ellipsis\">{product.name}</h5>\r\n          <small className=\"text-muted\">Quantity: 1kg</small>\r\n          <div className=\"d-flex justify-content-between mt-2 align-items-center\">\r\n            ${product.price}\r\n            <button className=\"btn rounded-circle bg-orange btn-sm\" onClick={()=>addToCart(product)}>\r\n              <ShoppingCart color=\"white\" size={18}/>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Trash2, XCircle } from \"react-feather\";\r\n\r\nexport default function Cart({ products, setCart }) {\r\n  const total = products.reduce((ac, product) => {\r\n    return ac + product.price * product.count;\r\n  }, 0);\r\n\r\n  const removeItem = id => {\r\n    const data = products.filter(product => product.id !== id);\r\n    setCart(data);\r\n  };\r\n\r\n  const changeCount = (event, id) => {\r\n    const data = products.map(product => {\r\n      if (product.id === id) {\r\n        return {\r\n          ...product,\r\n          count: event.target.value\r\n        };\r\n      }\r\n      return {\r\n        ...product\r\n      };\r\n    });\r\n    setCart(data);\r\n  };\r\n\r\n  const clearCart = () => {\r\n    setCart([]);\r\n  };\r\n\r\n  const [state, setstate] = useState({ showform: false, address: \"\", msg: \"\" });\r\n\r\n  const placeOrder = () => {\r\n    if (products.length > 0) {\r\n      setstate(prevState => ({\r\n        ...prevState,\r\n        showform: true\r\n      }));\r\n    } else {\r\n      alert(\"Please Select Product First\");\r\n    }\r\n  };\r\n\r\n  const onInputChange = e => {\r\n    const { name, value } = e.target;\r\n    setstate(prevState => ({\r\n      ...prevState,\r\n      [name]: value\r\n    }));\r\n  };\r\n\r\n  const confirmOrder = () => {\r\n    postOrder();\r\n    setCart([]);\r\n    setstate(prevState => ({\r\n      ...prevState,\r\n      showform: false,\r\n      address: \"\"\r\n    }));\r\n  };\r\n\r\n  const postOrder = async () => {\r\n    const data = {\r\n      amount: total,\r\n      address: state.address,\r\n      products: products.map(p => ({\r\n        name: p.name,\r\n        price: p.price,\r\n        count: p.count\r\n      }))\r\n    };\r\n    const res = await fetch(\"/orders\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"content-type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(data)\r\n    });\r\n    const response = await res.json();\r\n    setstate(prevState => ({\r\n      ...prevState,\r\n      msg: response.msg\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"card shadow-sm\">\r\n      <div className=\"card-header d-flex justify-content-between\">\r\n        Your Cart\r\n        <span\r\n          className=\"btn btn-sm border shadow-sm align-items-center\"\r\n          onClick={clearCart}\r\n        >\r\n          <Trash2 size={13} /> Clear\r\n        </span>\r\n      </div>\r\n      <div className=\"py-2 cart-scroll\">\r\n        {products.length > 0 ? null : (\r\n          <div className=\"text-center my-4\">\r\n            {state.msg ? (\r\n              <p className=\"alert alert-success\">{state.msg}</p>\r\n            ) : null}\r\n            <b>Cart is Empty!</b>\r\n            <p className=\"text-muted\">Please Select a Product</p>\r\n          </div>\r\n        )}\r\n\r\n        {state.showform ? (\r\n          <div className=\"p-2\">\r\n            <div className=\"form-group\">\r\n              <label>Shipping Address</label>\r\n              <textarea\r\n                name=\"address\"\r\n                className=\"form-control\"\r\n                onChange={onInputChange}\r\n                value={state.address}\r\n                placeholder=\"Add Your Mobile Number & Address...\"\r\n              ></textarea>\r\n            </div>\r\n            <button\r\n              className=\"btn btn-success btn-sm float-right\"\r\n              onClick={confirmOrder}\r\n              disabled={state.address.length === 0}\r\n            >\r\n              Confrim\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <table className=\"cart-table\">\r\n            <tbody>\r\n              {products.map(p => (\r\n                <tr key={p.id}>\r\n                  <td>\r\n                    <img\r\n                      src=\"food.png\"\r\n                      alt=\"prod\"\r\n                      className=\"img-circle\"\r\n                      width={40}\r\n                    />\r\n                  </td>\r\n                  <td className=\"ellipsis\">\r\n                    <small>{p.name}</small>\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      type=\"number\"\r\n                      className=\"counter\"\r\n                      value={p.count}\r\n                      onChange={e => changeCount(e, p.id)}\r\n                    />\r\n                  </td>\r\n                  <td>${p.price * p.count}</td>\r\n                  <td>\r\n                    <span\r\n                      className=\"cursor-pointer\"\r\n                      onClick={() => removeItem(p.id)}\r\n                    >\r\n                      <XCircle color=\"orange\" size={20} />\r\n                    </span>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      </div>\r\n      <div className=\"card-footer d-flex justify-content-between align-items-center\">\r\n        <button\r\n          className=\"btn bg-orange\"\r\n          onClick={placeOrder}\r\n          disabled={products.length === 0}\r\n        >\r\n          Place Order\r\n        </button>\r\n        Grand Total ${total}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport ProductCard from \"./components/ProductCard\";\nimport Cart from \"./components/Cart\";\n\nfunction App() {\n  const [state, setState] = useState({ products: [], cart: [] });\n\n  const setCart = cart => {\n    setState(prevState => ({ ...prevState, cart }));\n  };\n\n  useEffect(() => {\n    async function fetchData() {\n      const res = await fetch(\"/products\");\n      const products = await res.json();\n      setState(prevState => ({ ...prevState, products }));\n    }\n    fetchData();\n  }, []);\n\n  const addToCart = data => {\n    let alreadyInCart = false;\n    let cart = state.cart.map(p => {\n      if (p.id === data.id) {\n        alreadyInCart = true;\n        return {\n          ...p,\n          count: p.count + 1\n        };\n      }\n      return {\n        ...p\n      };\n    });\n    if (!alreadyInCart) {\n      cart = [...cart, { ...data, count: 1 }];\n    }\n    setCart(cart);\n  };\n\n  return (\n    <div>\n      <nav className=\"navbar navbar-light bg-orange\">\n        <a className=\"navbar-brand text-white\" href=\"!#\">\n          Navbar\n        </a>\n      </nav>\n      <div className=\"container mt-4\">\n        <div className=\"row\">\n          <div className=\"col-md-8\">\n            <div className=\"row\">\n              {state.products.slice(0,9).map(c => (\n                <ProductCard key={c.id} product={c} addToCart={addToCart} />\n              ))}\n            </div>\n          </div>\n          <div className=\"col-md-4\">\n            <Cart products={state.cart} setCart={setCart} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}